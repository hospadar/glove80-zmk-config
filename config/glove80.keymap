/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 3>, <&to 3>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_CAPS";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        homerow_left: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <16 28 40 58 5 17 29 41 59 75 8 9 18 19 20 21 30 31 32 33 42 43 44 45 60 61 62 63 76 77 78 79 7 6 55 56 57 58 73 74 72 71 54 53 52 69 70>;
            tapping-term-ms = <500>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        homerow_right: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 55 56 57 64 65 66 67 68 69 70 71 72 73 74 2 3 4>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        sticky_hold_tap: sticky_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_HOLD_TAP";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        auto_snake: auto_snake {
            compatible = "zmk,behavior-tap-dance";
            label = "AUTO_SNAKE";
            #binding-cells = <0>;
            bindings = <&kp CAPSLOCK>, <&to 1>;
        };

        autosnake_caps_hold: autosnake_caps_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSNAKE_CAPS_HOLD";
            bindings = <&kp>, <&auto_snake>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        rctrl_hold_tap: rctrl_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RCTRL_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        caps_shift_l: caps_shift_l {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_SHIFT_L";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2                 &kp F3                &kp F4                &kp F5                                                                                                                                               &kp F6                   &kp F7                 &kp F8                      &kp F9                          &kp F10
&kp ESCAPE  &kp N1                 &kp N2                &kp N3                &kp N4                  &kp N5                                                                                                               &kp N6  &kp N7                   &kp N8                 &kp N9                      &kp N0                          &kp BACKSLASH
&kp TAB     &kp Q                  &kp W                 &kp E                 &kp R                   &kp T                                                                                                                &kp Y   &kp U                    &kp I                  &kp O                       &kp P                           &kp MINUS
&kp GRAVE   &homerow_left LCTRL A  &homerow_left LALT S  &homerow_left LGUI D  &homerow_left LSHIFT F  &kp G                                                                                                                &kp H   &homerow_right RSHIFT J  &homerow_right RGUI K  &homerow_right RIGHT_ALT L  &homerow_right RCTRL SEMICOLON  &kp SQT
&kp LSHIFT  &kp Z                  &kp X                 &kp C                 &kp V                   &kp B   &caps_shift_l LEFT_SHIFT 0  &kp LGUI   &mo 3  &kp LGUI  &kp RIGHT_CONTROL  &shift_caps RIGHT_SHIFT CAPSLOCK  &kp N   &kp M                    &kp COMMA              &kp DOT                     &kp FSLH                        &shift_caps RSHIFT CAPSLOCK
&magic 4 0  &kp HOME               &kp END               &kp LEFT              &kp BACKSPACE                   &kp BACKSPACE               &kp SPACE  &mo 1  &mo 2     &kp RET            &kp DELETE                                &kp DELETE               &kp EQUAL              &kp LBKT                    &kp RBKT                        &kp PG_DN
            >;
        };

        grey {
            bindings = <
&trans  &trans     &trans     &trans     &trans                                                                             &trans            &trans             &trans                &trans                 &trans
&trans  &trans     &trans     &trans     &trans      &trans                                                         &trans  &trans            &trans             &trans                &trans                 &trans
&trans  &trans     &trans     &trans     &trans      &trans                                                         &trans  &trans            &trans             &trans                &trans                 &trans
&trans  &kp LCTRL  &kp LALT   &kp LGUI   &kp LSHIFT  &trans                                                         &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)   &trans  &trans  &trans  &trans  &trans  &trans  &to 0          &trans  &trans            &kp LEFT_BRACE     &kp RIGHT_BRACE       &trans                 &trans
&trans  &trans     &trans     &trans     &trans              &trans  &trans  &trans  &to 0   &trans  &kp RS(MINUS)          &trans            &trans             &trans                &trans                 &trans
            >;
        };

        purple {
            bindings = <
&trans  &trans     &trans    &trans    &trans                                                                      &trans    &trans    &trans        &trans     &trans
&trans  &trans     &trans    &trans    &trans      &trans                                                  &trans  &trans    &trans    &trans        &trans     &trans
&trans  &trans     &trans    &trans    &trans      &trans                                                  &trans  &trans    &trans    &trans        &trans     &trans
&trans  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHIFT  &trans                                                  &trans  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans
&trans  &kp HOME   &kp END   &trans    &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans    &trans        &trans     &trans
&trans  &trans     &trans    &trans    &trans              &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans        &trans     &trans
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                            &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &kp F11          &kp F12
&trans        &none         &none       &none       &none      &kp HOME                                                      &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                       &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                     &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans     &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &kp SPACE             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };
    };
};
